{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","LineGraphDeaths.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","casesColors","hex","half_op","multiplier","sortData","data","sortedData","sort","a","b","mapMarkers","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","numeral","format","recovered","deaths","Map","countries","zoom","MapContainer","scrollWheelZoom","TileLayer","url","attribute","Table","style","backgroundImage","flag","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","buildChartData","chartData","date","newDataPoint","x","y","push","options","type","legend","display","elements","point","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","datasets","borderColor","borderWidth","buildChartDataD","deathsType","LineGraphD","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","mapZoom","mapCountries","setMapCountries","name","value","iso2","getCountries","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35bb0582.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\n\nfunction InfoBox({ title, cases, total }) {\n    return (\n        <Card className='infoBox'>\n            <CardContent>\n                {/*Title*/}\n                <Typography className='infoBox_title' color='textSecondary'>\n                    {title}\n                </Typography>\n                {/*Num cases*/}\n                <h2 className='infoBox_cases'>{cases}</h2>\n                {/*Total*/}\n                <Typography className='infoBox_total' color='textSecondary'>\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react';\nimport { Circle, Popup } from 'react-leaflet';\nimport numeral from 'numeral';\n\nconst casesColors = {\n    cases: {\n        hex: \"#FF0000\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 100, //circle size\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a, b) => {\n        if (a.cases > b.cases) {\n            return -1;\n        } else {\n            return 1;\n        }\n    })\n    return sortedData;\n};\n\n// Popups on map\nexport const mapMarkers = (data, casesType = 'cases') => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.3}\n            color={casesColors[casesType].hex}\n            fillColor={casesColors[casesType].hex}\n            radius={Math.sqrt(country[casesType]) * casesColors[casesType].multiplier}\n        >\n            <Popup>\n                <div>\n                    <div><strong>{country.country}</strong></div>\n                    <div>Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);\n\n","import React from 'react';\nimport './Map.css';\nimport { MapContainer, TileLayer } from 'react-leaflet';\nimport { mapMarkers } from './util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <MapContainer center={center} zoom={zoom} scrollWheelZoom={false}>\n                <TileLayer\n                    url='https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png'\n                    attribute='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    className='map-tiles'\n                />\n                {mapMarkers(countries, casesType)}\n            </MapContainer>\n        </div>\n    );\n}\n\nexport default Map;\n\n/* Leaflet dark theme: https://gist.github.com/BrendonKoz/b1df234fe3ee388b402cd8e98f7eedbd\n*/\n","import React from 'react'\nimport './Table.css'\nimport numeral from 'numeral';\n\nfunction Table({ countries }) {\n    return (\n        <div className='table'>\n            {countries.map(({ country, cases, countryInfo }) => (\n                <tr>\n                    <td className='table-flag' style={{ backgroundImage: `url(${countryInfo.flag})` }}></td>\n                    <td>{country}</td>\n                    <td>{numeral(cases).format('0,0')}</td>\n                </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n} from 'chart.js'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n)\n\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n\n    for (let date in data.cases) {\n\n        let newDataPoint = {\n            x: date,\n            y: data[casesType][date]\n        };\n        chartData.push(newDataPoint);\n\n\n    }\n    return chartData;\n};\n\nconst options = {\n    type: 'line',\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0, //creates continuous line\n        },\n    },\n\n};\n\n\nfunction LineGraph({ casesType }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\") // daily cases in last 120 days\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    console.log(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n            {(\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                borderColor: \"#FF0000\",\n                                borderWidth: 5,\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n} from 'chart.js'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n)\n\n\nconst buildChartDataD = (data, deathsType) => {\n    let chartData = [];\n\n    for (let date in data.deaths) {\n\n        let newDataPoint = {\n            x: date,\n            y: data[deathsType][date]\n        };\n        chartData.push(newDataPoint);\n        console.log(chartData)\n\n\n    }\n    return chartData;\n};\n\n\n\nconst options = {\n    type: 'line',\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0, //creates continuous line\n        },\n    },\n\n};\n\n\nfunction LineGraphD({ deathsType }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\") //daily deaths in last 120 days\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    console.log(data)\n                    let chartData = buildChartDataD(data, deathsType);\n                    setData(chartData);\n                    console.log(chartData);\n                });\n        };\n\n        fetchData();\n    }, [deathsType]);\n\n    return (\n        <div>\n            {(\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                borderColor: \"#FF0000\",\n                                borderWidth: 5,\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraphD;","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core'\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport LineGraphD from './LineGraphDeaths';\nimport { sortData } from './util';\nimport numeral from 'numeral';\n\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  const [deathsType, setDeathsType] = useState('deaths');\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n        console.log(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    //runs one time when component loads and when variable changes\n    const getCountries = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //Country names\n            value: country.countryInfo.iso2 //Country codes\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          console.log(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n          console.log((countries))\n        });\n    };\n\n    getCountries();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    //ternary operator to set data according to endpoint\n    const url = countryCode === 'worldwide'\n      ? 'https://disease.sh/v3/covid-19/all'\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n      });\n  };\n\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 Dashboard</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>Wordwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox title='COVID-19 Cases' cases={numeral(countryInfo.todayCases).format(\"0,0\")} total={numeral(countryInfo.cases).format('0,0')} />\n          <InfoBox title='COVID-19 Recoveries' cases={numeral(countryInfo.todayRecovered).format('0,0')} total={numeral(countryInfo.recovered).format('0,0')} />\n          <InfoBox title='COVID-19 Deaths' cases={numeral(countryInfo.todayDeaths).format(\"0,0\")} total={numeral(countryInfo.deaths).format('0,0')} />\n        </div>\n        <Map countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <br></br>\n      <div>\n        <Card className=\"app_right\">\n          <CardContent>\n            <h3>Worldwide Cases</h3>\n            <LineGraph casesType={casesType} />\n            <br></br>\n            <br></br>\n            <h3>Worldwide Deaths</h3>\n            <LineGraphD deathsType={deathsType} />\n            <br></br>\n            <br></br>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </CardContent>\n        </Card>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}